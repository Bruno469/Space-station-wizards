using Content.Client.UserInterface;
using Content.Shared.Turbine;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Turbine.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class TurbineWindow : DefaultWindow
    {
        public TurbineWindow(TurbineControllerBoundUserInterface ui)
        {
            RobustXamlLoader.Load(this);

            ToggleActivated.OnPressed += _ => ui.ButtonPressed(UiButton.ToggleActivated);
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        /// 
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (TurbineControllerBoundUserInterfaceState) state;

            // Disable all buttons if not powered
            if (!castState.IsMaster)
            {
                ToggleActivated.Disabled = true;
            }

            RPM.Text = $"{castState.RPM}";
            // format power statistics to pretty numbers
            CurrentPowerSupply.Text = $"{castState.CurrentPowerSupply.ToString("N1")}";
        }
    }
}